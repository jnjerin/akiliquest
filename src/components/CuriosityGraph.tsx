"use client";

import { useEffect, useRef } from "react";
import { CuriosityNode } from "@/components/ExploreContent";

interface CuriosityGraphProps {
  trail: CuriosityNode[];
}

export function CuriosityGraph({ trail }: CuriosityGraphProps) {
  const svgRef = useRef<SVGSVGElement>(null);

  useEffect(() => {
    if (!svgRef.current) return;

    // Simple graph layout - for now we'll create a basic tree layout
    // In a real implementation, you might want to use D3.js or a similar library
    const svg = svgRef.current;
    const rect = svg.getBoundingClientRect();
    const width = rect.width || 600;
    const height = rect.height || 400;

    // Clear previous content
    svg.innerHTML = '';

    // Create simple tree layout
    const levelHeight = height / (Math.max(...trail.map(n => n.level)) + 2);
    const positions = new Map<string, { x: number; y: number }>();

    // Calculate positions for each node
    const levelGroups = trail.reduce((acc, node) => {
      if (!acc[node.level]) acc[node.level] = [];
      acc[node.level].push(node);
      return acc;
    }, {} as Record<number, CuriosityNode[]>);

    Object.entries(levelGroups).forEach(([level, nodes]) => {
      const levelNum = parseInt(level);
      const y = (levelNum + 1) * levelHeight;
      const spacing = width / (nodes.length + 1);
      
      nodes.forEach((node, index) => {
        const x = (index + 1) * spacing;
        positions.set(node.id, { x, y });
      });
    });

    // Draw connections
    trail.forEach(node => {
      const nodePos = positions.get(node.id);
      if (!nodePos || !node.connections) return;

      node.connections.forEach(connectionId => {
        const connectionPos = positions.get(connectionId);
        if (!connectionPos) return;

        // Create line element
        const line = document.createElementNS('http://www.w3.org/2000/svg', 'line');
        line.setAttribute('x1', nodePos.x.toString());
        line.setAttribute('y1', nodePos.y.toString());
        line.setAttribute('x2', connectionPos.x.toString());
        line.setAttribute('y2', connectionPos.y.toString());
        line.setAttribute('stroke', '#10b981');
        line.setAttribute('stroke-width', '2');
        line.setAttribute('opacity', '0.6');
        svg.appendChild(line);
      });
    });

    // Draw nodes
    trail.forEach(node => {
      const pos = positions.get(node.id);
      if (!pos) return;

      // Create group for node
      const group = document.createElementNS('http://www.w3.org/2000/svg', 'g');
      group.setAttribute('transform', `translate(${pos.x}, ${pos.y})`);

      // Create circle
      const circle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');
      circle.setAttribute('r', '30');
      circle.setAttribute('fill', `hsl(${160 + node.level * 20}, 70%, 50%)`);
      circle.setAttribute('stroke', 'white');
      circle.setAttribute('stroke-width', '3');
      circle.style.cursor = 'pointer';
      
      // Add hover effect
      circle.addEventListener('mouseenter', () => {
        circle.setAttribute('r', '35');
      });
      circle.addEventListener('mouseleave', () => {
        circle.setAttribute('r', '30');
      });

      group.appendChild(circle);

      // Add text (abbreviated)
      const text = document.createElementNS('http://www.w3.org/2000/svg', 'text');
      text.setAttribute('text-anchor', 'middle');
      text.setAttribute('dy', '0.35em');
      text.setAttribute('fill', 'white');
      text.setAttribute('font-size', '10');
      text.setAttribute('font-weight', 'bold');
      text.textContent = node.title.length > 8 ? node.title.substring(0, 8) + '...' : node.title;
      text.style.pointerEvents = 'none';
      group.appendChild(text);

      svg.appendChild(group);
    });

  }, [trail]);

  return (
    <div className="w-full h-96 bg-gray-50 dark:bg-gray-900 rounded-lg border border-gray-200 dark:border-gray-700 overflow-hidden">
      <svg
        ref={svgRef}
        className="w-full h-full"
        viewBox="0 0 600 400"
        preserveAspectRatio="xMidYMid meet"
      >
        {/* SVG content will be generated by useEffect */}
      </svg>
      
      <div className="p-4 bg-white dark:bg-gray-800 border-t border-gray-200 dark:border-gray-700">
        <p className="text-sm text-gray-600 dark:text-gray-400 text-center">
          Interactive graph view - hover over nodes to explore connections
        </p>
      </div>
    </div>
  );
}
